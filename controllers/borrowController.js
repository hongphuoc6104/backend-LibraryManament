const Borrow = require('../models/Borrow')
const Book = require('../models/Book');

const createBorrow = async (req, res) => {
    try {
        const { borrowerId, onModel, bookId, ngayTra } = req.body;

        // --- LOGIC KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN M∆Ø·ª¢N S√ÅCH ---

        // 1. L·∫•y t·∫•t c·∫£ s√°ch ng∆∞·ªùi d√πng ƒëang m∆∞·ª£n
        const currentBorrows = await Borrow.find({
            borrowerId: borrowerId,
            status: 'ƒêang m∆∞·ª£n'
        });

        // 2. Ki·ªÉm tra n·∫øu ƒë√£ m∆∞·ª£n ƒë·ªß 3 cu·ªën
        if (currentBorrows.length >= 3) {
            return res.status(400).json({ message: 'B·∫°n ƒë√£ m∆∞·ª£n ƒë·ªß 3 cu·ªën s√°ch. Vui l√≤ng tr·∫£ s√°ch c≈© tr∆∞·ªõc khi m∆∞·ª£n th√™m.' });
        }

        // 3. Ki·ªÉm tra xem c√≥ cu·ªën n√†o b·ªã qu√° h·∫°n kh√¥ng
        const now = new Date();
        const hasOverdueBook = currentBorrows.some(borrow => new Date(borrow.ngayTra) < now);
        
        if (hasOverdueBook) {
            return res.status(400).json({ message: 'B·∫°n c√≥ s√°ch ƒë√£ qu√° h·∫°n tr·∫£. Vui l√≤ng tr·∫£ s√°ch tr∆∞·ªõc khi m∆∞·ª£n th√™m.' });
        }
        // --- K·∫æT TH√öC LOGIC KI·ªÇM TRA ---
        
        // C√°c b∆∞·ªõc c√≤n l·∫°i gi·ªØ nguy√™n
        const book = await Book.findById(bookId);
        if (!book || book.soQuyen <= 0) {
            return res.status(400).json({ message: 'S√°ch ƒë√£ h·∫øt ho·∫∑c kh√¥ng t·ªìn t·∫°i.' });
        }

        const newBorrow = new Borrow({ borrowerId, onModel, bookId, ngayTra });
        await newBorrow.save();

        await Book.findByIdAndUpdate(bookId, { $inc: { soQuyen: -1 } });

        res.status(201).json(newBorrow);
    } catch (error) {
        console.error(error);
        res.status(400).json({ message: 'Kh√¥ng th·ªÉ t·∫°o phi·∫øu m∆∞·ª£n s√°ch' });
    }
};

// ... c√°c h√†m kh√°c gi·ªØ nguy√™n

// file: controllers/borrowController.js

const getBorrowHistoryByUser = async (req, res) => {
    try {
        // S·ª≠a l·∫°i: D√πng `borrowerId` thay v√¨ `userId`
        const borrows = await Borrow.find({ borrowerId: req.params.userId })
            .populate('borrowerId') // üëà Th√™m v√†o: L·∫•y th√¥ng tin ng∆∞·ªùi m∆∞·ª£n
            .populate('bookId');   // Gi·ªØ l·∫°i: L·∫•y th√¥ng tin s√°ch
            
        res.status(200).json(borrows);
   } catch(error) {
        console.error(error);
        res.status(500).json({ message: 'L·ªói khi l·∫•y l·ªãch s·ª≠ m∆∞·ª£n c·ªßa ng∆∞·ªùi d√πng' });
    }
};

const getAllBorrows = async (req, res) => {
    try {
        // Ch·ªâ c·∫ßn populate `borrowerId`, Mongoose s·∫Ω t·ª± ƒë·ªông d√πng refPath
        const borrows = await Borrow.find().populate('borrowerId').populate('bookId');
        res.status(200).json(borrows);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch phi·∫øu m∆∞·ª£n' });
    }
};

const markAsReturned = async (req, res) => {
    try {
        const borrowId = req.params.id;
        const updatedBorrow = await Borrow.findByIdAndUpdate(
            borrowId,
            {
                status: 'ƒê√£ tr·∫£',
                ngayThucTra: new Date() // Ghi l·∫°i ng√†y tr·∫£ l√† ng√†y hi·ªán t·∫°i
            },
            { new: true }
        );

        if (!updatedBorrow) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n' });
        }
        res.status(200).json(updatedBorrow);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu m∆∞·ª£n' });
    }
};

const deleteBorrow = async (req, res) => {
    try {
        const deletedBorrow = await Borrow.findByIdAndDelete(req.params.id);
        if (!deletedBorrow) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n' });
        }
        res.status(200).json({ message: 'ƒê√£ x√≥a phi·∫øu m∆∞·ª£n th√†nh c√¥ng' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi x√≥a phi·∫øu m∆∞·ª£n' });
    }
};

module.exports = {
    createBorrow,
    getBorrowHistoryByUser,
    getAllBorrows,
    markAsReturned,
    deleteBorrow
}